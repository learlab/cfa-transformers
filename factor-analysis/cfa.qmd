---
# title: "Confirmatory Factor Analysis"
format: html
execute:
  warning: false
---

# Imports

```{r, include=FALSE, echo=FALSE}
library(tidyverse)
library(lavaan) # Structural Equation Modeling
library(corrr) # Used for getting all pairs of columns with colpair_map
library(DescTools) # Used for confidence intervals with Kendall's Tau
library(semPlot) # Path diagrams
library(semptools) # Customize SEM plots
library(semTools) # Extract metrics from SEM models (AVE)
library(ggplot2)
library(ggalluvial) # Sankey diagrams
library(ggrepel) # Dodge overlapping text elements in ggplot
library(corrplot) # For drawing correlation plots
library(stargazer) # For outputting HTML tables
```

# Data

```{r}
data_path <- "~/active-projects/ellipse-aes/results/deberta-cfa.csv"

df <- read_csv(data_path, show_col_types = FALSE) %>% 
  rename_all(make.names) %>% 
  rename_all(tolower) %>% 
  mutate(across(starts_with("deberta"), round)) %>%
  filter(overall_1 > 0) %>%
  mutate(across(matches(".*_[12]$"), \(x) factor(
    x,
    ordered=TRUE,
    levels=1:5,
    labels=c("1", "2", "3", "4", "5")
    )))
  
```

## EDA

```{r}
ggplot(df, aes(x = overall_2, fill=overall_2)) +
  geom_bar(show.legend=FALSE) +
  theme_minimal() +
  scale_fill_viridis_d() +
  geom_text(
    aes(label = after_stat(count)),
    stat = "count",
    vjust = -0.5
  ) +
  labs(title = "Rater 1 Scores", x = "Score", y = "Count", fill="Score")
```

```{r}
ggplot(data = df,
       aes(
         axis1 = overall_1,
         axis2 = overall_2
         )) +
  scale_x_discrete(limits=c("Rater 1", "Rater 2")) +
  geom_alluvium(aes(fill=overall_1)) +
  geom_stratum(alpha=0.15) +
  geom_text_repel(
    stat="stratum",
    aes(label = after_stat(stratum)),
    direction="y",
    nudge_x = 0.25
    ) +
  theme_minimal() +
  labs(
    title = "Overall Proficiency Scores by Rater",
    y = "Count",
    x = "Rater",
    fill="Score"
  )
ggsave("sankey.png", width=7, height=4, dpi=300)
```

# Performance of Finetuned Models

```{r}
get_perf_stats <- function(x, y) {
  x <- as.numeric(x)
  y <- as.numeric(y)
  tau <- round(KendallTauB(x, y, conf.level=.95), 3)
  cat("\nKendall Tau:", tau[1], "Lower:", tau[2], "Upper:", tau[3])
  cat("\nOdds-ratio of agreement:", round((1+tau[1])/(1-tau[1]), 3))
  cat("\nSquared Rho:", round(cor(x, y, method = "spearman")**2, 3))
}
cat("Rater 1 vs Model 1")
get_perf_stats(df$overall_1, df$deberta_overall_1)
cat("\n\nRater 2 vs Model 2")
get_perf_stats(df$overall_2, df$deberta_overall_2)
cat("\n\nRater 1 vs Rater 2")
get_perf_stats(df$overall_1, df$overall_2)
cat("\n\nModel 1 vs Model 2")
get_perf_stats(df$deberta_overall_1, df$deberta_overall_2)

df %>% 
  select(overall_1, overall_2, deberta_overall_1, deberta_overall_2) %>% 
  mutate_all(as.numeric) %>% 
  setNames(c("Rater 1", "Rater 2", "Deberta 1", "Deberta 2")) %>%
  colpair_map(KendallTauB, .diagonal=1.0) %>%
  {.->>x;.} %>%
  as_matrix()  %>% 
  corrplot(addCoef.col = 'white', cl.pos="b", type="lower") 
```

# Fit Models

```{r}
spec <- ' overall =~ a*overall_1 + a*overall_2
    + b*deberta_overall_1 + b*deberta_overall_2'

# std.lv fixes the variance of latent factors to 1
# required for model to be identified
fit1 <- cfa(
  spec,
  data = df,
  std.lv=TRUE,
  ordered=TRUE,
  estimator="ULS"
  )
fit1.labels <- c("Human 1", "Human 2", "LLM 1", "LLM 2", "Proficiency")
fit1.ss <- standardizedSolution(fit1)

fit2 <- cfa(
  ' human =~ a*overall_1 + a*overall_2
    llm =~ b*deberta_overall_1 + b*deberta_overall_2
  ',
  data=df,
  std.lv=TRUE,
  ordered=TRUE,
  estimator="ULS"
  )
fit2.labels <- c("Human 1", "Human 2", "LLM 1", "LLM 2", "Proficiency\n(Human)", "Proficiency\n(LLM)")
fit2.ss <- standardizedSolution(fit2)
summary(fit1, fit.measures = TRUE)
summary(fit2, fit.measures = TRUE)
```

```{r}
fitMeasures(fit1, c("cfi","rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr"))
```

```{r}
parameterEstimates(fit2) %>% 
  filter(
    lhs == "human",
    rhs == "llm"
    ) %>% 
  print()
fitMeasures(fit2, c("cfi","rmsea", "rmsea.ci.lower", "rmsea.ci.upper", "srmr"))
```

# Tables

```{r, results="asis"}
get_factors <- function(ss) {
  factors <- ss[ss[,'op']=='=~', c(1, 3:5)]
  return(factors)
}

get_factor_table <- function(factors) {
  stargazer(
    factors,
    summary=FALSE,
    type='html',
    rownames=FALSE,
    column.labels=c("Factor", "Variable", "Standardized Loading", "Standard Error"),
    initial.zero=FALSE,
    digits=3,
    title='Factor loadings'
    )
}

fit1.factors <- get_factors(fit1.ss)
get_factor_table(fit1.factors)

fit2.factors <- get_factors(fit2.ss)
get_factor_table(fit2.factors)
```

```{r}
make_sem_plot <- function(fit, labels, include_estimates, filename="") {
  semPaths(
    fit,
    nodeLabels=labels,
    sizeMan=10,
    sizeLat=10,
    edge.label.cex = 1.15,
    label.cex = 1.15,
    intercepts=FALSE,
    residuals=TRUE,
    thresholds=FALSE,
    whatLabels=if (include_estimates) "est" else "no",
    filetype="png",
    filename=filename,
    mar=c(10,3,10,3)
  )
}

make_sem_plot(fit1, fit1.labels, FALSE, "one_factor_no_est")
make_sem_plot(fit2, fit2.labels, FALSE, "two_factor_no_est")
make_sem_plot(fit1, fit1.labels, TRUE, "one_factor")
make_sem_plot(fit2, fit2.labels, TRUE, "two_factor")
```

```{r}
  semPaths(
    fit2,
    nodeLabels=fit2.labels,
    sizeMan=10,
    sizeLat=10,
    edge.label.cex = 1.15,
    label.cex = 1.15,
    intercepts=FALSE,
    residuals=TRUE,
    thresholds=FALSE,
    whatLabels="est",
    mar=c(10,3,10,3)
  )
```

## Standardized Factor Loadings

```{r}
inspect(fit1,what="std")$lambda
```

```{r}
inspect(fit2,what="std")$lambda
```

## Average Variance Explained

```{r}
AVE(fit1)
```

```{r}
AVE(fit2)
```

## Method Variance Model

```{r}
spec3 <- ' overall =~ overall_1 + overall_2
    + deberta_overall_1 + deberta_overall_2
    # overall_1 ~~ overall_2
    deberta_overall_1 ~~ deberta_overall_2
'

# std.lv fixes the variance of latent factors to 1
# required for model to be identified
fit3 <- cfa(
  spec3,
  data = df,
  std.lv=TRUE,
  ordered=TRUE,
  estimator="ULS"
  )
fit3.labels <- c("Rater 1", "Rater 2", "Deberta 1", "Deberta 2", "Overall")
fit3.ss <- standardizedSolution(fit3)
print(summary(fit3, fit.measures = TRUE))
semPaths(
  fit3,
  nodeLabels=fit3.labels,
  sizeMan=10,
  sizeLat=10,
  edge.label.cex = 1.15,
  label.cex = 1.15,
  intercepts=FALSE,
  residuals=TRUE,
  thresholds=FALSE,
  whatLabels="est",
  mar=c(10,3,10,3)
)

```
