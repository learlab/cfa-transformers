---
# title: "Confirmatory Factor Analysis"
format: html
execute:
  warning: false
---

```{r}
library(tidyverse)
library(glue)
library(lavaan)
library(semPlot)
library(semptools)
library(semTools)
```


```{r}
data_path <- "~/active-projects/ellipse-aes/results/deberta-cfa.csv"

df <- read_csv(data_path, show_col_types = FALSE) %>% 
  rename_all(make.names) %>% 
  rename_all(tolower) %>% 
  mutate(across(starts_with("deberta"), round)) %>% 
  mutate(across(matches(".*_[12]$"), \(x) factor(
    x,
    ordered=TRUE,
    levels=0:5,
    labels=c("0", "1", "2", "3", "4", "5") # collapse 0 and 1 and 2
    )))
```

```{r}
barplot(table(df$overall_2))
```


```{r}
scores <- c("overall", "cohesion", "syntax", "vocabulary", "phraseology", "grammar", "conventions")

fit_cfa <- function(score_to_model) {
  spec <- glue(
    ' human =~ {score_to_model}_1 + {score_to_model}_2
      llm =~ deberta_{score_to_model}_1 + deberta_{score_to_model}_2
    '
  )
  # spec <- glue(
  #   ' comb =~ {score_to_model}_1 + {score_to_model}_2 + deberta_{score_to_model}_1 + 
  #             deberta_{score_to_model}_2 
  #     deberta_{score_to_model}_1 ~~ deberta_{score_to_model}_2 
  #     {score_to_model}_1 ~~ {score_to_model}_2
  #   '
  # )
  
  # std.lv fixes the variance of latent factors to 1
  # required for model to be identified
  fit <- cfa(spec, data = df, std.lv=TRUE, ordered=TRUE, estimator="DWLS")
  cased_score <- str_to_sentence(score_to_model)
  labels <- list("Rater 1", "Rater 2", "Deberta 1", "Deberta 2", glue("Rater"), glue("Deberta"))
  names(labels) <- c(
    glue("{score_to_model}_1"), glue("{score_to_model}_2"), "human",
    glue("deberta_{score_to_model}_1"), glue("deberta_{score_to_model}_2"), "llm")
  
  return(list("fit"=fit, "labels"=labels))
}

fit = fit_cfa("overall")
summary(fit$fit, fit.measures = TRUE)
# semPaths(fit$fit, nodeLabels=fit$labels, intercepts=TRUE, residuals=TRUE, whatLabels="est")
# lavaanPlot(model=fit, labels=labels, coefs=TRUE, stand=TRUE, sig=0.05, covs=TRUE)
```
```{r}
semPaths(fit$fit,
         # nodeLabels=fit$labels,
         sizeMan=14,
         sizeLat=14,
         edge.label.cex = 1.15,
         label.cex = 1.15,
         intercepts=FALSE,
         residuals=TRUE,
         thresholds=FALSE,
         whatLabels="est",
         mar=c(10,3,10,3)
         )
```
```{r}
AVE(fit$fit)
```
